var SlumpModCustomizationContent CustomizationBaseDummy;

reliable server function bool IsAdmin() {
    return WorldInfo.Game.AccessControl.IsAdmin(self) || WorldInfo.NetMode == NM_Standalone;
}

reliable server function S_AdminBroadcastMessage(string Message, optional bool bShowName=true) {
    local AOCPlayerController PC;
    foreach WorldInfo.AllControllers(class'AOCPlayerController', PC) {
        if (bShowName)
            PC.ReceiveChatMessage(AOCPRI(PlayerReplicationInfo).GetHumanReadableName()$":"@Message, EFAC_ALL, false, false, ,false);
        else
            PC.ReceiveChatMessage(Message, EFAC_ALL, false, false, ,false);
    }
}

exec function AdminBroadcastMessage(String Message) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage(Message);
}

exec function AdminChangeTeam(String PlayerName) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("AdminChangeTeam "$PlayerName);
    super.AdminChangeTeam(PlayerName);
}

exec function AdminChangeTeamDamageAmount(float Amount) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("AdminChangeTeamDamageAmount "$Amount);
    super.AdminChangeTeamDamageAmount(Amount);
}

exec function AdminCancelVote() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("AdminCancelVote");
    super.AdminCancelVote();
}

exec function AdminReadyAll() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("AdminReadyAll");
    super.AdminReadyAll();
}

function bool SetPause(bool bPause, optional delegate<CanUnpause> CanUnpauseDelegate=CanUnpause) {
	local bool bResult;
	if (bPause) {
		bFire = 0;
		// Pause gamepad rumbling too if needed
		bResult = WorldInfo.Game.SetPause(self,CanUnpauseDelegate);
		if (bResult)
			PauseRumbleForAllPlayers();
	} else if (IsAdmin()) {
		WorldInfo.Game.ClearPause();
		// If the unpause is complete, let rumble occur
		if (WorldInfo.Pauser == None) {
			// If we did a gameplay frame pause clear it out now
			WorldInfo.bGameplayFramePause = false;

			PauseRumbleForAllPlayers(false);
		}
	}
	return bResult;
}

/*function bool SetPause(bool bPause, optional delegate<CanUnpause> CanUnpauseDelegate=CanUnpause) {
	local bool bResult;
    bResult = false;
	if (bPause)
        bResult = ActualPause(CanUnpauseDelegate);
	else
        ClientDisplayConsoleMessage("Please use the command 'SlumpModUnpause' to unpause.");
	return bResult;
}

exec function SlumpModPause() {
    if (IsAdmin())
        ActualPause();
    else
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
}

exec function SlumpModUnpause() {
    if (IsAdmin() && bPaused)
        StartUnpauseCountdown();
    else if (!bPaused)
        ClientDisplayConsoleMessage("You cannot unpause at this time.");
    else
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
}

reliable server function StartUnpauseCountdown() {
    UnpauseCountdownTime = Default.UnpauseCountdownTime;
    AdminBroadcastMessage("Unpausing in...");
    CountdownTick();
    SetTimer(1.0f, true, 'CountdownTick');
}

reliable server function CountdownTick() {
    if (UnpauseCountdownTime == 0) {
        ActualUnpause();
        ClearTimer('CountdownTick');
    } else {
        AdminBroadcastMessage("    "@UnpauseCountdownTime@"...");
        UnpauseCountdownTime--;
    }
}

reliable server function bool ActualPause(delegate<CanUnpause> CanUnpauseDelegate=CanUnpause) {
    local bool bResult;
    bResult = false;
    if (IsAdmin() && !bPaused) {
        bFire = 0;
        // Pause gamepad rumbling too if needed
        bResult = WorldInfo.Game.SetPause(self,CanUnpauseDelegate);
        if (bResult) {
            PauseRumbleForAllPlayers();
            bPaused = true;
        }
    }
    return bResult;
}

reliable server function ActualUnpause() {
    if (IsAdmin() && bPaused) {
        WorldInfo.Game.ClearPause();
        // If the unpause is complete, let rumble occur
        if (WorldInfo.Pauser == None) {
            // If we did a gameplay frame pause clear it out now
            WorldInfo.bGameplayFramePause = false;
            PauseRumbleForAllPlayers(false);
        }
        bPaused = false;
    }
}*/

function LocalRequestJoinClass(byte inClass)
{
    Request_JoinClass(inClass);
}

exec function GetAdmins() {
    S_GetAdmins();
}

reliable server function S_GetAdmins() {
    local AOCPlayerController PC;
    ReceiveChatMessage("All admins:", EFAC_ALL, false, false, ,false);
    foreach WorldInfo.AllControllers(class'AOCPlayerController', PC) {
        if (AOCPRI(PC.PlayerReplicationInfo).bAdmin)
            ReceiveChatMessage(AOCPRI(PC.PlayerReplicationInfo).GetHumanReadableName(), EFAC_ALL, false, false, ,false);
    }
}

reliable client function NotifyTournamentWaiting(float Threshold) {
	bShowedTournamentWaitingMessage = true;
}

exec function AdminTournamentMode(optional bool bEnable = true)
{
    ClientDisplayConsoleMessage("Deprecated: use 'Admin TournamentMode' instead");
    ClientDisplayConsoleMessage("Disable: Admin TournamentMode 0");
    ClientDisplayConsoleMessage("Enable: Admin TournamentMode 1");
}

reliable server function S_AdminTournamentMode(bool bEnable) {}

reliable server function S_SendF10Message() {
    ReceiveChatMessage("You will implode in 1 second.", EFAC_ALL, false, false, ,false);
}

exec function FOV(float F) {
    if((F >= 60.0 && F <= 165.0) || PlayerReplicationInfo.bOnlySpectator) {
		DefaultFOV = F;
		DesiredFOV = DefaultFOV;

        if((F >= 60.0 && F <= 165.0) && PlayerCamera != None) {
            PlayerCamera.SetFOV( F );
            return;
        }

		if (IsLocalPlayerController()) {
			MyFOV = F;
			default.MyFOV = F;
			StaticSaveConfig();
		}
	}
}

exec function ce(optional name EventName) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("CauseEvent "$EventName);
    super.ce(EventName);
}

exec function CauseEvent(optional name EventName) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminBroadcastMessage("CauseEvent "$EventName);
    super.CauseEvent(EventName);
}

exec function AdminGotoDF() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    ServerChangeMap("AOCTO-Darkforest_p");
}

exec function AdminGotoSF() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    ServerChangeMap("AOCTO-Slumpforest_p");
}

exec function AdminGotoSH() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    ServerChangeMap("AOCTO-Slumpshill_p");
}

exec function AdminGotoSP() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    ServerChangeMap("AOCTO-Slumppost_p");
}

exec function AdminGotoDuel() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    ServerChangeMap("AOCFFA-Duelyard_p");
}

exec function AdminGotoSDuel() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    ServerChangeMap("aocffa-SlumpDuel_p");
}

exec function AdminGotoMoor() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    ServerChangeMap("AOCLTS-Moor_p");
}

exec function AdminGotoKendo() {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    ServerChangeMap("AOCTDM-Moor_p");
}

exec function AdminForceSpectate(String PlayerName) {
    if (!PlayerReplicationInfo.bAdmin) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }
    S_AdminForceSpectate(PlayerName);
}

reliable server function S_AdminForceSpectate(String PlayerName) {
    local AOCPlayerController Target;
    local AOCAccessControl AccessControl;

    AccessControl = AOCAccessControl(WorldInfo.Game.AccessControl);

	if (!IsAdmin()) {
		ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
		return;
	}

	Target = AOCPlayerController(AccessControl.GetControllerFromString(PlayerName));
	if (Target == none) {
		ClientDisplayConsoleMessage("The specified player was not found.");
		return;
	}

	if(Target.CurrentFamilyInfo.class == class'AOCFamilyInfo_Agatha_King' || Target.CurrentFamilyInfo.class == class'AOCFamilyInfo_Mason_King' || AOCPRI(Target.PlayerReplicationInfo).bAdmin) {
		ClientDisplayConsoleMessage("The specified player cannot be moved to spectate.");
		return;
	}

	Target.JoinSpectatorTeam();

    S_AdminBroadcastMessage("AdminForceSpectate "$AOCPRI(Target.PlayerReplicationInfo).GetHumanReadableName());
}

exec function AdminForceSpectateAll() {
    S_AdminForceSpectateAll();
}

reliable server function S_AdminForceSpectateAll() {
    local AOCPlayerController Target;

    if (!IsAdmin()) {
        ClientDisplayConsoleMessage("You are not logged in as an administrator on this server.");
        return;
    }

    foreach WorldInfo.AllControllers(class'AOCPlayerController', Target)
    {
        if (Target.CurrentFamilyInfo.class == class'AOCFamilyInfo_Agatha_King' ||
            Target.CurrentFamilyInfo.class == class'AOCFamilyInfo_Mason_King' ||
            Target.PlayerReplicationInfo.bAdmin
        ) {
            ClientDisplayConsoleMessage("'" $ Target.PlayerReplicationInfo.GetHumanReadableName() $ "' cannot be forced to spectate.");
            continue;
        }

        Target.JoinSpectatorTeam();
    }

    S_AdminBroadcastMessage("AdminForceSpectateAll");
}

exec function Reload() {
	if(!ScriptBlockedInputs[EINBLOCK_Reload] && SlumpModWeapon_Crossbow(Pawn.Weapon) != none)
		SlumpModWeapon_Crossbow(Pawn.Weapon).ActivateReload();
}

exec function PerformAim() {
	if (class<SlumpModWeapon_Crossbow>(Pawn.Weapon.Class) != none)
		StartFire(1);
}

reliable server function ServerPerformFeint()
{
    if (Pawn.Weapon.IsInState('Active') || Pawn.Weapon.IsInState('Feint'))
        return;

    AOCPawn(Pawn).OnActionInitiated(EACT_Feint);
    AOCWeapon(Pawn.Weapon).DoFeintAttack();

    `{GAMEMODE}PRI(PlayerReplicationInfo).Feints += 1;
}

exec function ShowStats()
{
    local `{GAMEMODE}PRI PRI;

    PRI = `{GAMEMODE}PRI(PlayerReplicationInfo);

    ClientDisplayConsoleMessage("--------------------------------------------------");
    ClientDisplayConsoleMessage("--------------------------------------------------");
    ClientDisplayConsoleMessage("Score:"   @ PRI.Score);
    ClientDisplayConsoleMessage("Kills:"   @ PRI.NumKills);
    ClientDisplayConsoleMessage("Deaths:"  @ PRI.Deaths);
    ClientDisplayConsoleMessage("Assists:" @ PRI.NumAssists);
    ClientDisplayConsoleMessage("");
    ClientDisplayConsoleMessage("Health:");
    ClientDisplayConsoleMessage("    Regenerated:"        @ PRI.HealthRegenerated);
    ClientDisplayConsoleMessage("    Damage Received:");
    ClientDisplayConsoleMessage("        from all:"       @ PRI.AllDamageTaken);
    ClientDisplayConsoleMessage("        from enemies:"   @ PRI.DamageTaken);
    ClientDisplayConsoleMessage("        from teammates:" @ PRI.TeamDamageTaken);
    ClientDisplayConsoleMessage("    Damage Dealt:");
    ClientDisplayConsoleMessage("        to enemies:"     @ PRI.EnemyDamageDealt);
    ClientDisplayConsoleMessage("        to teammates:"   @ PRI.TeamDamageDealt);
    ClientDisplayConsoleMessage("");
    ClientDisplayConsoleMessage("Stamina:");
    ClientDisplayConsoleMessage("    Regenerated:"        @ PRI.StaminaRegenerated);
    ClientDisplayConsoleMessage("    Damage Received:");
    ClientDisplayConsoleMessage("        from all:"       @ PRI.AllStaminaConsumed);
    ClientDisplayConsoleMessage("        from enemies:"   @ PRI.EnemyStaminaDamageTaken);
    ClientDisplayConsoleMessage("        from teammates:" @ PRI.TeamStaminaDamageTaken);
    ClientDisplayConsoleMessage("    Damage Dealt:");
    ClientDisplayConsoleMessage("        to enemies:"     @ PRI.EnemyStaminaDamageDealt);
    ClientDisplayConsoleMessage("        to teammates:"   @ PRI.TeamStaminaDamageDealt);
    ClientDisplayConsoleMessage("");
    ClientDisplayConsoleMessage("Feints:" @ PRI.Feints);
    ClientDisplayConsoleMessage("");
    ClientDisplayConsoleMessage("Attacks:");
    ClientDisplayConsoleMessage("    Total:"      @ PRI.NumAttacks);
    ClientDisplayConsoleMessage("    Successful:" @ PRI.NumHits);
    ClientDisplayConsoleMessage("");
    ClientDisplayConsoleMessage("Hits:");
    ClientDisplayConsoleMessage("    Melee:"       @ PRI.MeleeHits);
    ClientDisplayConsoleMessage("    Projectile:"  @ PRI.ProjectileHits);
    ClientDisplayConsoleMessage("    Light Shove:" @ PRI.LightShoveHits);
    ClientDisplayConsoleMessage("    Heavy Shove:" @ PRI.HeavyShoveHits);
    ClientDisplayConsoleMessage("");
    ClientDisplayConsoleMessage("Parries:" @ PRI.Parries);
    ClientDisplayConsoleMessage("Blocks:"  @ PRI.Blocks);
    ClientDisplayConsoleMessage("");
    ClientDisplayConsoleMessage("Crouches:" @ PRI.Crouches);
    ClientDisplayConsoleMessage("Jumps:"    @ PRI.Jumps);
    ClientDisplayConsoleMessage("Dodges:"   @ PRI.Dodges);
    ClientDisplayConsoleMessage("");
    ClientDisplayConsoleMessage("Objective Points:" @ PRI.ObjPoints);
    ClientDisplayConsoleMessage("");
    ClientDisplayConsoleMessage("Decapitations:"    @ PRI.NumDecaps);
    ClientDisplayConsoleMessage("Chatter:"    @ PRI.Chatter);
    ClientDisplayConsoleMessage("--------------------------------------------------");
    ClientDisplayConsoleMessage("--------------------------------------------------");
}

reliable client function OverrideVoteText(optional string Primary, optional string Secondary)
{
    AOCBaseHUD(myHUD).HUD.MainHUD.VotePrimaryTitle.SetText(Primary);
    AOCBaseHUD(myHUD).HUD.MainHUD.VoteSecondaryTitle.SetText(Secondary);
}

exec function VoteTournamentMode(bool bEnable)
{
    ServerVoteTournamentMode(bEnable);
}

reliable server function ServerVoteTournamentMode(bool bEnable)
{
    `{GAMEMODE} (WorldInfo.Game).InitiateVoteTournamentMode(self, bEnable);
}

exec function VoteRankedMode(bool bEnable)
{
    ServerVoteRankedMode(bEnable);
}

reliable server function ServerVoteRankedMode(bool bEnable)
{
    `{GAMEMODE} (WorldInfo.Game).InitiateVoteRankedMode(self, bEnable);
}

exec function VoteRankedTeamSize(int Size)
{
    ServerVoteRankedTeamSize(Size);
}

reliable server function ServerVoteRankedTeamSize(int Size)
{
    `{GAMEMODE} (WorldInfo.Game).InitiateVoteRankedTeamSize(self, Size);
}

exec function VoteRestartMapAfterEndGame(bool bEnable)
{
    ServerVoteRestartMapAfterEndGame(bEnable);
}

reliable server function ServerVoteRestartMapAfterEndGame(bool bEnable)
{
    `{GAMEMODE} (WorldInfo.Game).InitiateVoteRestartMapAfterEndGame(self, bEnable);
}

function DrawTextOverHead(string DebugText)
{
	local color tcolor;
	tcolor.G = 0;
	FlushDebugStrings();
	DrawDebugString(Vect(0, 0, 85.0), DebugText, Pawn, tcolor); //off for now
}

function bool IsSprintAngle(int fInputAngle) //checks if the player should be allowed to sprint or not
{
	//DrawTextOverHead(string(fInputAngle));
	return ((fInputAngle < 27079) && (fInputAngle > 7892)); //24576, 8192
}

// Player movement.
// Player Standing, walking, running, falling.
state PlayerWalking
{
	//This doesn't do anything besides add an extra function call to the stack and should probably be deleted.
	//Calling the ProcessMove function without this would automatically call the function in the parent class.
	//If someone else sees this and agrees, delete it.  If I'm missing something, then /slap Eric
	//In the mean time, I commented it out.
	
	function ProcessMove(float DeltaTime, vector NewAccel, eDoubleClickDir DoubleClickMove, rotator DeltaRot)
	{
		super.ProcessMove(DeltaTime, NewAccel, DoubleClickMove, DeltaRot);
	}
	

	function PlayerMove( float DeltaTime )
	{
		local vector			X,Y,Z, NewAccel;
		local eDoubleClickDir	DoubleClickMove;
		local rotator			OldRotation;
		local bool				bSaveJump;
        local bool              bLastMoveForward;

		if( Pawn == None )
		{
			GotoState('Dead');
		}
		else
		{
			GetAxes(Pawn.Rotation,X,Y,Z);

			InputDirection.X = PlayerInput.aStrafe;
			InputDirection.Y = PlayerInput.aForward;
			InputDirection.Z = 0.f;

			bLastMoveForward = bMoveForward;

			bMoveBackward = PlayerInput.aForward < 0.0f;
			bMoveForward = (PlayerInput.aForward > 0.0f);
			bMoving = PlayerInput.aForward != 0.0f || PlayerInput.aStrafe != 0.0f;
			
			
			
			if (Role != ROLE_Authority || WorldInfo.NetMode == NM_Standalone || (Worldinfo.NetMode == NM_ListenServer && IsLocalPlayerController()))
			{
				if ((bLastMoveForward && !bMoveForward) || (bLastMoveForward && !IsSprintAngle(rotator(InputDirection).Yaw)))
				{
					AOCPawn(Pawn).DisableSprint(true);
				}
			}
			
			// Update acceleration.
			NewAccel = Vect(0,0,0);
			if(!ScriptBlockedInputs[EINBLOCK_MoveBackward] && bMoveBackward
				|| !ScriptBlockedInputs[EINBLOCK_MoveForward] && bMoveForward )
			{
				NewAccel += PlayerInput.aForward*X;
			}
			
			if(!ScriptBlockedInputs[EINBLOCK_MoveLeft] && PlayerInput.aStrafe < 0.0f
				|| !ScriptBlockedInputs[EINBLOCK_MoveRight] && PlayerInput.aStrafe > 0.0f )
			{
				if (AOCPawn(Pawn).StateVariables.bIsSprinting)
					NewAccel += PlayerInput.aStrafe*Y * 0.5f;
				else
					NewAccel += PlayerInput.aStrafe*Y;
			}
			
			NewAccel.Z	= 0;
			NewAccel = Pawn.AccelRate * Normal(NewAccel);
			NewAccel = NewAccel;
			// NewAccel is max when we're walking, limit it slightly when we're in the air whatever
			if (Pawn.Physics != PHYS_Walking)
				NewAccel *= 0.25f;
				
			if(ScriptBlockedInputs[EINBLOCK_Dodge])
			{	
				DoubleClickMove = DCLICK_None;
			}
			else
			{
				DoubleClickMove = PlayerInput.CheckForDoubleClickMove( DeltaTime/WorldInfo.TimeDilation );
			}

			// Update rotation.
			OldRotation = Rotation;
			if (AOCPawn(Pawn).PawnState != ESTATE_PUSH && !bForceIgnoreRotation)
				UpdateRotation( DeltaTime * AOCPawn(Pawn).ModAnimRate );
			bDoubleJump = false;
			bPressedJump = bPressedJump && !ScriptBlockedInputs[EINBLOCK_Jump];
			if( bPressedJump && Pawn.CannotJumpNow() )
			{
				bSaveJump = true;
				bPressedJump = false;
			}
			else
			{
				bSaveJump = false;
			}
			if( Role < ROLE_Authority ) // then save this move and replicate it
			{
				ReplicateMove(DeltaTime, NewAccel, DoubleClickMove, OldRotation - Rotation);
			}
			else
			{
				ProcessMove(DeltaTime, NewAccel, DoubleClickMove, OldRotation - Rotation);
			}
			bPressedJump = bSaveJump;		
		}
	}
}

DefaultProperties
{
    suicideDelay = 1.0f
    CustomizationClass=class'SlumpModCustomization'
}
